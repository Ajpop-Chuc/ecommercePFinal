{"version":3,"sources":["firebase/index.js","components/widgets/TransactionList.js","components/widgets/BuySellChart.js","routes/admin-panel/reports/index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","TabContainer","children","dir","Typography","component","style","padding","TransactionColumns","TransferColumns","ExpenseColumns","TransactionList","state","value","handleChange","event","setState","this","props","theme","transactionList","transferReport","expenseCategory","className","AppBar","position","color","Tabs","onChange","indicatorColor","textColor","variant","Tab","label","axis","direction","index","Table","TableHead","TableRow","map","th","TableCell","TableBody","list","transid","date","account","Chip","type","typeColor","amount","debit","balance","status","statusColor","itmNo","companyName","Component","withStyles","withTheme","BuySellChart","anchorEl","allData","chartData","handleClick","currentTarget","handleClose","data","item","tag","Button","undefined","onClick","Menu","id","open","Boolean","onClose","MenuItem","changeChartData","ResponsiveContainer","width","height","LineChart","XAxis","dataKey","YAxis","axisLine","Tooltip","CartesianGrid","vertical","stroke","Line","strokeWidth","React","InvoiceList","allChartData","getTransactionListData","getTransferReportData","getExpenseCategoryData","getAllChartData","database","ref","on","snapshot","val","newdata","ContentLoader"],"mappings":"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","file":"static/js/43.a3a0b895.chunk.js","sourcesContent":["/**\n * Firebase Data\n * embryo comes with built in firebase database features\n * You Need To Add Your Firsebase App Account Details Here\n */\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\nvar firebaseConfig = {\n\tapiKey: \"AIzaSyBXyGS6LdNauzj-nn4ItKNV0tTFSm9lYuI\",\n\tauthDomain: \"embryo-react-29ecb.firebaseapp.com\",\n\tdatabaseURL: \"https://embryo-react-29ecb.firebaseio.com\",\n\tprojectId: \"embryo-react-29ecb\",\n\tstorageBucket: \"embryo-react-29ecb.appspot.com\",\n\tmessagingSenderId: \"118413959528\",\n\tappId: \"1:118413959528:web:2e99d374df424af2e636dd\",\n\tmeasurementId: \"G-K3MWJBBM6T\"\n };\n // Initialize Firebase\n firebase.initializeApp(firebaseConfig);\n\n\nexport default firebase;","/**\n * Transaction table section\n */\n/* eslint-disable */\nimport React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport SwipeableViews from 'react-swipeable-views';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Chip from '@material-ui/core/Chip';\n\nfunction TabContainer({ children, dir }) {\n   return (\n      <Typography component=\"div\" dir={dir} style={{ padding: 8 * 3 }}>\n         {children}\n      </Typography>\n   );\n}\n\nconst TransactionColumns = ['Transaction Id', 'date', 'account', 'type', 'amount', 'debit', 'balance'];\n\nconst TransferColumns = ['Transfer Id', 'date', 'account', 'type', 'amount', 'balance', 'status'];\n\nconst ExpenseColumns = ['item No', 'date', 'type', 'company name', 'amount', 'status'];\n\nclass TransactionList extends Component {\n\n   state = {\n      value: 0,\n   };\n\n   handleChange = (event, value) => {\n      this.setState({ value });\n   };\n\n   render() {\n      const { theme, transactionList, transferReport, expenseCategory } = this.props;\n      return (\n         <div className=\"Transaction-table-wrap Tab-wrap\">\n            <AppBar position=\"static\" color=\"default\">\n               <Tabs\n                  value={this.state.value}\n                  onChange={this.handleChange}\n                  indicatorColor=\"primary\"\n                  textColor=\"primary\"\n                  variant=\"scrollable\"\n               >\n                  <Tab label=\"transaction list\" className=\"text-capitalize\" />\n                  <Tab label=\"transfer report\" className=\"text-capitalize\" />\n                  <Tab label=\"expense category\" className=\"text-capitalize\" />\n               </Tabs>\n            </AppBar>\n            <SwipeableViews\n               axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n               index={this.state.value}>\n               <div className=\"card mb-0 transaction-box\">\n                  <TabContainer dir={theme.direction}>\n                     <Table className=\"table-wrap\">\n                        <TableHead>\n                           <TableRow>\n                              {TransactionColumns.map((th, index) => (\n                                 <TableCell key={index} className=\"fw-bold\">{th}</TableCell>\n                              ))}\n                           </TableRow>\n                        </TableHead>\n                        <TableBody>\n                           {transactionList.map((list, index) => (\n                              <TableRow key={index}>\n                                 <TableCell>{list.transid}</TableCell>\n                                 <TableCell>{list.date}</TableCell>\n                                 <TableCell>{list.account}</TableCell>\n                                 <TableCell><Chip label={list.type} className={list.typeColor} /></TableCell>\n                                 <TableCell>{list.amount}</TableCell>\n                                 <TableCell>{list.debit}</TableCell>\n                                 <TableCell>{list.balance}</TableCell>\n                              </TableRow>\n                           ))}\n                        </TableBody>\n                     </Table>\n                  </TabContainer>\n               </div>\n               <div className=\"card mb-0 transaction-box\">\n                  <TabContainer dir={theme.direction}>\n                     <Table className=\"table-wrap\" >\n                        <TableHead>\n                           <TableRow>\n                              {TransferColumns.map((th, index) => (\n                                 <TableCell key={index} className=\"fw-bold\">{th}</TableCell>\n                              ))}\n                           </TableRow>\n                        </TableHead>\n                        <TableBody>\n                           {transferReport.map((list, index) => (\n                              <TableRow key={index}>\n                                 <TableCell>{list.transid}</TableCell>\n                                 <TableCell>{list.date}</TableCell>\n                                 <TableCell>{list.account}</TableCell>\n                                 <TableCell><Chip label={list.type} className={list.typeColor} /></TableCell>\n                                 <TableCell>{list.amount}</TableCell>\n                                 <TableCell>{list.balance}</TableCell>\n                                 <TableCell><Chip label={list.status} className={list.statusColor} /></TableCell>\n                              </TableRow>\n                           ))}\n                        </TableBody>\n                     </Table>\n                  </TabContainer>\n               </div>\n               <div className=\"card mb-0 transaction-box\">\n                  <TabContainer dir={theme.direction}>\n                     <Table className=\"table-wrap\" >\n                        <TableHead>\n                           <TableRow>\n                              {ExpenseColumns.map((th, index) => (\n                                 <TableCell key={index} className=\"fw-bold\">{th}</TableCell>\n                              ))}\n                           </TableRow>\n                        </TableHead>\n                        <TableBody>\n                           {expenseCategory.map((list, index) => (\n                              <TableRow key={index}>\n                                 <TableCell>{list.itmNo}</TableCell>\n                                 <TableCell>{list.date}</TableCell>\n                                 <TableCell><Chip label={list.type} className={list.typeColor} /></TableCell>\n                                 <TableCell>{list.companyName}</TableCell>\n                                 <TableCell>{list.amount}</TableCell>\n                                 <TableCell><Chip label={list.status} className={list.statusColor} /></TableCell>\n                              </TableRow>\n                           ))}\n                        </TableBody>\n                     </Table>\n                  </TabContainer>\n               </div>\n            </SwipeableViews>\n         </div>\n      );\n   }\n}\n\nexport default withStyles(null, { withTheme: true })(TransactionList);\n","/**\n * Buy Sell Chart\n */\n/* eslint-disable */\nimport React, { Fragment } from 'react';\nimport {\n   ResponsiveContainer,\n   LineChart,\n   Line,\n   XAxis,\n   YAxis,\n   CartesianGrid,\n   Tooltip\n} from 'recharts';\nimport { Button } from '@material-ui/core';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport RctSectionLoader from '../global/rct-section-loader/RctSectionLoader';\n\nclass BuySellChart extends React.Component {\n   state = {\n      anchorEl: null,\n      allData: null,\n      chartData: null,\n   };\n   componentDidMount() {\n      this.setState({\n         allData: this.props.data,\n      })\n      for (let item of this.props.data) {\n         if (item.tag === 'week') {\n            this.setState({\n               chartData: item\n            })\n         }\n      }\n   }\n\n   changeChartData(tag) {\n      let { allData } = this.state;\n      for (let item of allData) {\n         if (item.tag == tag) {\n            this.setState({\n               chartData: item\n            });\n            break;\n         }\n      }\n   }\n\n   handleClick = event => {\n      this.setState({ anchorEl: event.currentTarget });\n   };\n\n   handleClose = () => {\n      this.setState({ anchorEl: null });\n   };\n\n   render() {\n      const { anchorEl, chartData } = this.state;\n      return (\n         <div className=\"app-card\">\n            <div className=\"app-card-title\">\n               <div className=\"d-sm-flex justify-content-between align-items-center\">\n                  <h5 className=\"text-uppercase\">Buy / Sell</h5>\n                  <div className=\"d-flex btn-wraps\">\n                     <Button className=\"mr-10\"><i className=\"material-icons\">cached</i></Button>\n                     <div>\n                        <Button\n                           aria-owns={anchorEl ? 'simple-menu' : undefined}\n                           aria-haspopup=\"true\"\n                           onClick={this.handleClick}\n                        >\n                           <i className=\"material-icons\">more_horiz</i>\n                        </Button>\n                        <Menu\n                           id=\"simple-menu\"\n                           anchorEl={anchorEl}\n                           open={Boolean(anchorEl)}\n                           onClose={this.handleClose}\n                        >\n                           <MenuItem onClick={this.handleClose}>\n                              <i className=\"material-icons pr-15\">settings</i>\n                              settings\n                           </MenuItem>\n                           <MenuItem onClick={this.handleClose}>\n                              <i className=\"material-icons pr-15\">more</i>\n                              view more\n                           </MenuItem>\n                           <MenuItem onClick={this.handleClose}>\n                              <i className=\"material-icons pr-15\">notifications_off</i>\n                              disable notification\n                           </MenuItem>\n                           <MenuItem onClick={this.handleClose}>\n                              <i className=\"material-icons pr-15\">exit_to_app</i>\n                              remove panel\n                           </MenuItem>\n                        </Menu>\n                     </div>\n                  </div>\n               </div>\n            </div>\n            <div className=\"app-content pl-0\">\n               <div className=\"my-sm-15 mb-10 pl-20 d-flex justify-content-sm-end align-items-center\">\n                  <Button\n                     className=\"button btn-sm btn-active mb-10 mr-10\"\n                     onClick={() => this.changeChartData('week')}\n                  >\n                     week\n                  </Button>\n                  <Button\n                     className=\"button btn-sm btn-primary mb-10 mr-10\"\n                     onClick={() => this.changeChartData('month')}\n                  >\n                     month\n                  </Button>\n                  <Button\n                     className=\"button btn-sm  btn-danger mb-10\"\n                     onClick={() => this.changeChartData('year')}\n                  >\n                     year\n                  </Button>\n               </div>\n               <Fragment>\n                  {chartData !== null ?\n                     <ResponsiveContainer width='100%' height={450}>\n                        <LineChart\n                           data={chartData.data}\n                        >\n                           <XAxis dataKey=\"name\" />\n                           <YAxis axisLine={false} />\n                           <Tooltip />\n                           <CartesianGrid vertical={false} stroke=\"#f5f5f5\" />\n                           <Line type=\"monotone\" dataKey=\"Buy\" stroke=\"#283593\" strokeWidth={3} />\n                           <Line type=\"monotone\" dataKey=\"Sell\" stroke=\"#0097a7\" strokeWidth={3} />\n                           <Line type=\"monotone\" dataKey=\"Transfer\" stroke=\"#e0e0e0\" strokeWidth={3} />\n                        </LineChart>\n                     </ResponsiveContainer>\n                     :\n                     \"Loading...\"\n                  }\n               </Fragment>\n            </div>\n            {/* <RctSectionLoader /> */}\n         </div>\n      )\n   }\n}\n\nexport default BuySellChart;\n","/**\n * reports\n */\n/* eslint-disable */\nimport React, { Component, Fragment } from 'react';\nimport TransactionList from '../../../components/widgets/TransactionList';\nimport ContentLoader from '../../../components/global/loaders/ContentLoader';\n\n//firebase\nimport firebase from '../../../firebase';\n\n//component\nimport BuySellChart from '../../../components/widgets/BuySellChart';\n\nexport default class InvoiceList extends Component {\n   state = {\n      anchorEl: null,\n      transactionList: null,\n      transferReport: null,\n      expenseCategory: null,\n      allChartData: null,\n   };\n\n   componentDidMount() {\n      this.getTransactionListData();\n      this.getTransferReportData();\n      this.getExpenseCategoryData();\n      this.getAllChartData();\n   }\n\n   //get transaction data\n   getTransactionListData() {\n      const transactionListRef = firebase.database().ref('transaction_list');\n      transactionListRef.on('value', (snapshot) => {\n         let transactionList = snapshot.val();\n         this.setState({\n            transactionList: transactionList\n         });\n      });\n   }\n   //get transfer report data\n   getTransferReportData() {\n      const transferReportRef = firebase.database().ref('transfer_report');\n      transferReportRef.on('value', (snapshot) => {\n         let transferReport = snapshot.val();\n         this.setState({\n            transferReport: transferReport\n         });\n      });\n   }\n   //get expense category data\n   getExpenseCategoryData() {\n      const expenseCategoryRef = firebase.database().ref('expense_category');\n      expenseCategoryRef.on('value', (snapshot) => {\n         let expenseCategory = snapshot.val();\n         this.setState({\n            expenseCategory: expenseCategory\n         });\n      });\n   }\n   //get chart data\n   getAllChartData() {\n      const allChartDataRef = firebase.database().ref('chart_Data');\n      allChartDataRef.on('value', (snapshot) => {\n         let newdata = snapshot.val();\n         this.setState({\n            allChartData: newdata\n         });\n      });\n   }\n\n   render() {\n      const { transactionList, transferReport, expenseCategory, allChartData } = this.state;\n      return (\n         <Fragment>\n            {transactionList !== null && transferReport !== null && expenseCategory !== null && allChartData !== null ?\n               <div className=\"inner-container\">\n                  <div className=\"iron-reports-wrap\">\n                     <BuySellChart data={allChartData} />\n                     <div className=\"iron-shadow rounded p-20 bg-base\">\n                        <TransactionList transactionList={transactionList} transferReport={transferReport} expenseCategory={expenseCategory} />\n                     </div>\n                  </div>\n               </div>\n               :\n               <ContentLoader />\n            }\n         </Fragment>\n      )\n   }\n}"],"sourceRoot":""}